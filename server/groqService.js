import Groq from 'groq-sdk';
import db from './database.js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Carrega API Key
let GROQ_API_KEY = process.env.GROQ_API_KEY || '';
try {
  const envPath = path.join(__dirname, '..', '.env');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf-8');
    const match = envContent.match(/GROQ_API_KEY=(.+)/);
    if (match) {
      GROQ_API_KEY = match[1].trim();
    }
  }
} catch (error) {
  console.warn('GROQ_API_KEY n√£o encontrada');
}

const groq = new Groq({ apiKey: GROQ_API_KEY });

class GroqAgent {
  async processCommand(userCommand) {
    try {
      console.log('‚ö° [1] Groq processando:', userCommand);

      // Busca dados atuais do sistema
      console.log('üìä [2] Buscando dados do sistema...');
      const veiculos = db.prepare('SELECT * FROM veiculos').all();
      const stats = db.prepare(`
        SELECT 
          COUNT(*) as total,
          SUM(CASE WHEN status = 'estoque' THEN 1 ELSE 0 END) as estoque,
          SUM(CASE WHEN status = 'vendido' THEN 1 ELSE 0 END) as vendidos,
          COALESCE(SUM(preco_compra), 0) as total_investido,
          COALESCE(SUM(CASE WHEN status = 'vendido' THEN preco_venda ELSE 0 END), 0) as total_vendas
        FROM veiculos
      `).get();
      
      const gastos = db.prepare('SELECT COALESCE(SUM(valor), 0) as total FROM gastos').get();
      const lucro = stats.total_vendas - stats.total_investido - gastos.total;
      
      console.log('‚úÖ [3] Dados obtidos:', stats);

      const systemPrompt = `Voc√™ √© MAGNO, um assistente inteligente de gest√£o de ve√≠culos.

DADOS ATUAIS DO SISTEMA:
- Total de ve√≠culos: ${stats.total}
- Em estoque: ${stats.estoque}
- Vendidos: ${stats.vendidos}
- Total investido: R$ ${stats.total_investido.toLocaleString('pt-BR')}
- Total vendas: R$ ${stats.total_vendas.toLocaleString('pt-BR')}
- Total gastos: R$ ${gastos.total.toLocaleString('pt-BR')}
- Lucro l√≠quido: R$ ${lucro.toLocaleString('pt-BR')}

VE√çCULOS CADASTRADOS:
${veiculos.length > 0 ? veiculos.map(v => 
  `- ${v.marca} ${v.modelo} ${v.ano || ''} (${v.status}) - Compra: R$ ${v.preco_compra}${v.status === 'vendido' && v.preco_venda ? `, Venda: R$ ${v.preco_venda}` : ''}`
).join('\n') : 'Nenhum ve√≠culo cadastrado ainda.'}

REGRAS:
1. Responda SEMPRE em portugu√™s do Brasil
2. Seja conversacional, amig√°vel e direto
3. Use os dados acima para responder perguntas
4. Para comandos de a√ß√£o (cadastrar, adicionar, deletar), explique que precisa de confirma√ß√£o
5. Seja conciso mas informativo
6. Use emojis quando apropriado para deixar mais amig√°vel
7. Se n√£o souber algo, seja honesto`;

      console.log('üì§ [4] Enviando para Groq API...');
      
      const completion = await groq.chat.completions.create({
        messages: [
          {
            role: 'system',
            content: systemPrompt
          },
          {
            role: 'user',
            content: userCommand
          }
        ],
        model: 'llama-3.3-70b-versatile', // Modelo mais recente e poderoso
        temperature: 0.7,
        max_tokens: 500,
        top_p: 1,
      });

      console.log('üì• [5] Recebendo resposta...');
      const responseText = completion.choices[0]?.message?.content || 'Desculpe, n√£o consegui processar.';

      console.log('‚úÖ [6] Groq respondeu:', responseText);

      // Detecta se √© um comando de a√ß√£o
      const isActionCommand = userCommand.toLowerCase().match(
        /(cadastr|adicionar|registrar|delet|remov|vend|marc|atuali|mud)/
      );

      return {
        action: isActionCommand ? 'pending' : 'success',
        response: responseText,
        confidence: 0.95,
        needs_confirmation: !!isActionCommand
      };

    } catch (error) {
      console.error('‚ùå [ERRO Groq] Detalhes:');
      console.error('   Mensagem:', error.message);
      
      // Detecta diferentes tipos de erro
      if (error.message && error.message.includes('rate limit')) {
        console.warn('‚ö†Ô∏è  Limite de taxa do Groq atingido.');
        return {
          action: 'rate_limit',
          response: 'Estou processando muitas requisi√ß√µes. Aguarde alguns segundos e tente novamente.',
          confidence: 0,
          error: 'Rate limit'
        };
      }
      
      if (error.message && error.message.includes('API key')) {
        console.error('‚ùå Problema com API Key do Groq');
        return {
          action: 'error',
          response: 'H√° um problema com a configura√ß√£o da API. Verifique a chave.',
          confidence: 0,
          error: 'API Key inv√°lida'
        };
      }
      
      return {
        action: 'error',
        response: 'Tive um problema t√©cnico. Por favor, tente novamente.',
        confidence: 0,
        error: error.message
      };
    }
  }
}

const hasApiKey = GROQ_API_KEY && GROQ_API_KEY.startsWith('gsk_');

if (hasApiKey) {
  console.log('‚ö° Groq AI ativado (Llama 3.1 70B - Super R√°pido!)');
} else {
  console.warn('‚ö†Ô∏è  Groq API Key n√£o encontrada');
}

const groqAgent = new GroqAgent();

export { groqAgent, hasApiKey };
